* ZSH and Oh My ZSH!

  One day, I started cleaning up my zsh. I began with the starter
  [[https://github.com/robbyrussell/oh-my-zsh/blob/9d2b5c841e251840d7965163f4eb9797bc0db49f/templates/zshrc.zsh-template][.zshrc template]]. I removed comments, and the began to focus on just
  what I needed.

** Basic Setup

*** Getting Started

    This needs to be the path to my oh-my-zsh configuration. It's
    magic to me:

    #+BEGIN_SRC sh :tangle ../home/.zshrc
      ZSH=$HOME/.oh-my-zsh
    #+END_SRC

    I disable auto correction. This happened years ago, but I recall
    that it was messing with my cadence and generally making bad
    suggestions.

    #+BEGIN_SRC sh :tangle ../home/.zshrc
      DISABLE_CORRECTION="true"
    #+END_SRC

    I am currently trying out the git plugin:

    #+BEGIN_SRC sh :tangle ../home/.zshrc
      # Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
      # Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
      plugins=(git)
    #+END_SRC

    The theme that I'm using:

    #+BEGIN_SRC sh :tangle ../home/.zshrc
      ZSH_THEME="sorin"
    #+END_SRC

    Next, we get the core of oh-my-zsh running:

    #+BEGIN_SRC sh :tangle ../home/.zshrc
      source $ZSH/oh-my-zsh.sh
    #+END_SRC

*** Theme Tweaks

    I'm using a theme above, but I have a few customizations.

    Sourcing =oh-my-zsh.zsh= gets things going, and it takes the value
    stored in =ZSH_THEME= and sources it. Now that it's defined, we
    can customize it.

    What I'm looking to do with these customizations is add context
    (time of day and git sha) to my prompt. The idea is that if you're
    working over the course of the day (and committing), and then
    things take a turn for the worse, you'll be able to scroll
    backwards through your session-- watching yourself issue commands
    and commits-- and alongside those you'll see the time and a sha to
    jump back to (say, via a =reset --hard=).

    People can use =git reflog= to get at the SHAs, but, they won't
    have the same context that comes from the time and the commands
    they were typing as they review the list of SHAs.

    #+BEGIN_SRC sh :tangle ../home/.zshrc
      RPROMPT='${time} %{$fg[magenta]%}$(git_prompt_short_sha)%{$reset_color%}$(git_prompt_status)%{$reset_color%}$(git_prompt_ahead)%{$reset_color%}'
      time_enabled="%(?.%{$fg[green]%}.%{$fg[red]%})%*%{$reset_color%}"
      time_disabled="%{$fg[green]%}%*%{$reset_color%}"
      time=$time_enabled
    #+END_SRC

** Aliases

   I call out aliases in multiple places. This section contains stuff
   that otherwise wouldn't have a home.

   Some things, like aliases for rvm, are down in the RVM section.

*** e

    If you've got a running emacs, this can bring you into editing a
    file with a quickness.

    If that file is under version control, you can switch into magit
    within emacs in a jiffy.

    #+BEGIN_SRC sh :tangle ../home/.zshrc
      alias e=emacsclient
    #+END_SRC

*** r

    I run rake all the time. Let's call it =r=.

    #+BEGIN_SRC sh :tangle ../home/.zshrc
      alias r='rake'
    #+END_SRC

*** b, be, bec

    I run =bundle= and =bundle exec= and =bundle exec cucumber= all the
    time. Let's call them =b=, =be=, and =bec=.

    #+BEGIN_SRC sh :tangle ../home/.zshrc
      alias b='bundle'
      alias be='bundle exec'
      alias bec='bundle exec cucumber'
    #+END_SRC

*** c

    This makes it so that pressing =c= gives me a syntax highlighted
    =cat=. I first learned of it from [[https://twitter.com/paul_irish/status/257310654631919616][Paul Irish]].

    To get it working, you need to have Python and you need to have
    easy_install which, in turn, is used to install Pygments. On MacOS,
    I ran =sudo easy_install Pygments= without any trouble.

    #+BEGIN_SRC sh :tangle ../home/.zshrc
      alias c='pygmentize -O style=autumn -f console256 -g'
    #+END_SRC

*** cl, cless

    If we combine the =c= from above with the notion of only looking
    at a page of text at a time, we get the idea combining c and
    less. We'll call it "cless" or "cl" for short.

    #+BEGIN_SRC sh :tangle ../home/.zshrc
      function cless () {
        colorized=$(c $1)
        echo $colorized | less
      }

      alias cl=cless
    #+END_SRC

*** Git

    I used to eschew aliases from the official oh-my-zsh git plugin,
    and that meant I had dozens of custom aliases here.

    As I work with more and more people that are just starting off
    with git, I makes more sense for me to get them going with
    oh-my-zsh conventions than to share my custom aliases.

    Knowing that I've got the git plugin aliases already defined, I
    add the following:

**** g

     First, stop zsh's git plugin from taking over g.

     Then make =g=, by itself, be =git status=.

     If used with arguments, then make =g= be =git=

     Finally, complete =g= like =git=.

     This comes from [[https://github.com/thoughtbot/dotfiles/blob/master/zsh/functions/g][thoughtbot's dotfiles]].

     #+BEGIN_SRC sh :tangle ../home/.zshrc
       unalias g

       g() {
         if [[ $# > 0 ]]; then
           git $@
         else
           git status
         fi
       }

       compdef g=git
     #+END_SRC

**** Fetch Support

     I rarely ever pull, and instead, I fetch and then rebase or
     merge. Maybe this will change? But, until it does, I add new
     aliases as it seems the oh-my-zsh git plugin is pull-centric.

     #+BEGIN_SRC sh :tangle ../home/.zshrc
       alias gf='git fetch'
     #+END_SRC

**** I :heart: merge commits

     Near as I can tell, merging a pull request on Github always
     creates a merge commit, and so, if I'm merging on the command
     line I like to see this same behavior.

     Thusly-- =gm= is my default command for merging and it adds
     =--no-ff= to force the creation of a merge commit and =--log= to
     include a list of what was merged in the message.

     Here's [[https://github.com/jedcn/reveal-ck/commit/0117a90b06ca444188d54172fb8515b851363c5a][an example of a merge + merge commit]] created in this
     fashion.

     #+BEGIN_SRC sh :tangle ../home/.zshrc
       alias gm='git merge --no-ff --log'
     #+END_SRC

**** gcom, gdom, gpom, grom

     We do so much work around master, it makes sense to have a series
     of functions that orient toward it:

     #+BEGIN_SRC sh :tangle ../home/.zshrc
       alias gcom='git checkout master'
       alias gdom='git diff origin/master'
       alias gpom='git push origin master'
       alias grom='git reset --hard origin/master'
     #+END_SRC

     If not working against master, my other approach to git work is
     to work around an upstream.

     In most cases, I setup an upstream with =gcob= (see below). If I
     did not start off that way, I use =gsu= to do "git setup
     upstream." Once that is in place, when I want to ask "What are
     the differences between what I have locally and what is
     upstream?" Then I use =gdu= to do "git diff (against) upstream":

     #+BEGIN_SRC sh :tangle ../home/.zshrc
       alias gsu='git branch --set-upstream-to '
       alias gdu='git diff $(git rev-parse --symbolic-full-name @{u})'
     #+END_SRC

**** gcob

     A shortcut for =git checkout -b= when you want a local branch
     based on a branch up on origin.

     #+BEGIN_SRC sh :tangle ../home/.zshrc
       function gcob () {
         origin_branch_name=$1
         branch_name_without_origin=$(echo $origin_branch_name | sed 's/origin\///')
         local_branch_name=$branch_name_without_origin
         echo "Creating branch '$local_branch_name' based on '$origin_branch_name'"
         git checkout -b $local_branch_name $origin_branch_name
       }
     #+END_SRC

**** Things I Override

     There are a few things I really don't use or like from oh-my-zsh,
     and they are:

     * gca: oh-my-zsh uses this for =git commit --all=, which I don't
       do. Instead, I'll =git add .= and then commit. Further-- I
       amend frequently, and so =gca= is a mnemonic for *g*it *c*ommit
       *a*mend.
     * gdc: oh-my-zsh used to use this for =git diff --cached= but it
       conflicted with the GNU D Compiler (gdc). I've never heard of
       that, so, it's back for me.
     * gl: oh-my-zsh uses this for =git pull=, and I never
       pull. Instead, I am thinking it is handy way to get a graphical
       *g*it *l*og.

     #+BEGIN_SRC sh :tangle ../home/.zshrc
       alias gca='git commit --amend'
       alias gdc='git diff --cached'
       alias gl='glog'
       alias gla='glog --all'
     #+END_SRC

**** All the Rest

     And here's the remainder.

     I'm surprised the git plugin doesn't have grm and gmv.

     When it comes to =git push --force=, I avoid an alias like =gpf=
     and I instead fall back typing out =--force= each time, ala, =gp
     -force=:

     #+BEGIN_SRC sh :tangle ../home/.zshrc
       alias gs='git status --short'
       alias gmv='git mv'
       alias grm='git rm'
       alias gco='git checkout'
       alias gp='git push'
     #+END_SRC

*** Maven

    #+BEGIN_SRC sh :tangle ../home/.zshrc
      alias mci='mvn clean install'
    #+END_SRC

** Functions

   I like to be able to type =serve= and have a webserver start
   serving up the contents from wherever I typed =serve=. It comes
   from a [[http://stackoverflow.com/questions/3108395/serve-current-directory-from-command-line][Stack Overflow]] entry.

   You can type =serve= and you'll see the pwd displayed at
   http://localhost:3000, or you can type =serve <port_number>= and
   see the pwd displayed on port_number.

   #+BEGIN_SRC sh :tangle ../home/.zshrc
     function serve {
       port="${1:-3000}"
       ruby -r webrick -e "s = WEBrick::HTTPServer.new(:Port => $port, :DocumentRoot => Dir.pwd); trap('INT') { s.shutdown }; s.start"
     }
   #+END_SRC

   I often add remotes for my Github Enterprise (company name is
   roving.com).

   #+BEGIN_SRC sh :tangle ../home/.zshrc
     ghroving-remote-add() {
       git remote add $1 https://github.roving.com/$1/$2.git
     }
   #+END_SRC

** Misc

*** RBENV

    I have started using [[https://github.com/sstephenson/rbenv][rbenv]] to manage my rubies. It takes a ruby
    version from RBENV_VERSION. I also add a =.ruby-version= to my
    projects to remind myself of what =RBENV_VERSION= was when I
    created the project.

    #+BEGIN_SRC sh :tangle ../home/.zshrc
      export RBENV_VERSION=2.2.3
    #+END_SRC

*** RVM

    I sometimes still use RVM to manage my Rubies. At the end of the
    RVM install, we're told to setup our ZSH with the following (it
    does no harm if rvm isn't present):

    #+BEGIN_SRC sh :tangle ../home/.zshrc
      # RVM
      [[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm"
    #+END_SRC

    I maintain a distinct RVM Gemset for each project on my computer,
    and so, it's helpful to quickly understand which rvm ruby and rvm
    gemset is currently active. Thusly, =rvmc= is born, and it's all
    about =rvm current=.

    #+BEGIN_SRC sh :tangle ../home/.zshrc
      alias rvmc='rvm current'
    #+END_SRC

    If I'm creating a new project, or I've cloned someone else's
    project and they don't use rvm, I'd like to quickly create a
    =.ruby-gemset= and =.ruby-version= as an initializing step. I
    expect that this would be run from within the root directory of
    the project, and that directory matches the name of the
    project. As for a mnemonic, I think of =rvmi= as rvm initialize.

    #+BEGIN_SRC sh :tangle ../home/.zshrc
      function rvmi() {
        PROJECT_NAME=$(basename `pwd`)
        echo ${PROJECT_NAME} > .ruby-gemset
        echo "2.1.0" > .ruby-version
      }
    #+END_SRC

*** NodeEnv

    I have started using nodenv to manage my nodes. Just like rbenv,
    my projects call out which version of node they'd like via a
    =.node-version= file, but I also supply a default via an
    environment variable:

    #+BEGIN_SRC sh :tangle ../home/.zshrc
      export NODENV_VERSION=4.1.1
    #+END_SRC

*** Java

    I use the Java that comes with my MacOS. I need this setting for a
    set of internal tools.

    #+BEGIN_SRC sh :tangle ../home/.zshrc
      export JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Home
    #+END_SRC

    Except.. I'll use a jdk 1.7.x if it is present. I suspect I'll
    remove this shortly.

    #+BEGIN_SRC sh :tangle ../home/.zshrc
      if [ -d /Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home ];
      then
        export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home
      fi
    #+END_SRC

*** Path

    My =PATH= settings are mainly based on:

    + including stuff that brew gives me (/usr/local/bin)
    + including stuff that a MacTeX install gives me (/usr/texbin)
    + including stuff that rvm gives me.
    + including stuff that a local project of mine, mrsi, gives me.
    + including stuff that npm gives me.

    Upon review, I don't really use this anymore. Hmm!

    #+BEGIN_SRC sh :tangle ../home/.zshrc
      export PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/texbin
      export PATH=$PATH:/Users/jnorthridge/.rvm/bin:/Users/jnorthridge/c/misc/mrsi/bin
      export PATH=$PATH:/usr/local/share/npm/bin
    #+END_SRC

*** homeshick

    I often use [[https://github.com/andsens/homeshick][homeshick]] to manage my dot files. From the homeshick
    point of view, any git repository with a "home" directory can
    contain dot-files.

    The following comes from the homeshick introduction, and it makes
    it so that I can easily access any homeshick command, such as
    =homeshick pull=.

    #+BEGIN_SRC sh :tangle ../home/.zshrc
      if [ -d "$HOME/.homesick/repos/homeshick" ];
      then
        source "$HOME/.homesick/repos/homeshick/homeshick.sh"
      fi

      function sync_dot_files() {
        homeshick pull
      }
   #+END_SRC

** Boxen

   Startup Boxen if it's present. Among other things-- this:

   + Sets up node shims
   + Sets up rbenv shims
   + Lets you type "boxen" and it refreshes the machine.

   #+BEGIN_SRC sh :tangle ../home/.zshrc
     if [ -f "/opt/boxen/env.sh" ];
     then
       source /opt/boxen/env.sh
     fi
   #+END_SRC

    The [[https://github.com/wfarr/nodenv][installation instructions]] of nodenv say that you should start
    nodenv with your shell:

    #+BEGIN_SRC sh :tangle ../home/.zshrc
      if [ -x "/opt/boxen/nodenv/bin/nodenv" ]; then
        eval "(nodenv init -)"
      fi
    #+END_SRC

** Extensions

   These are my public dot files.

   However, some functions and aliases are not meant for public
   consumption.

   I keep everything in source control, but not everything is on
   https://github.com/jedcn.

*** Wayfair

    #+BEGIN_SRC sh :tangle ../home/.zshrc
      if [ -f ~/src/wayfair-dot-files/wayfair.sh ];
      then
        source ~/src/wayfair-dot-files/wayfair.sh
      fi
    #+END_SRC
