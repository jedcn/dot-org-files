* Getting Started

  #+BEGIN_SRC emacs-lisp
    ;;
    ;; Do not modify this file!
    ;;
    ;; It is generated from init.org
    ;;
  #+END_SRC

  This file is translated into =init.el= when you run the command
  =make=. Both this file and the generated file are committed.

* System Integration

  Whenever emacs needs to run an external command as part of a
  subprocess, like "ruby" or "coffeelint," it looks in =exec-path=,
  and so it is set explicitly:

  #+BEGIN_SRC emacs-lisp
    (setq jedcn-explicit-env-path
          (concat "/opt/boxen/rbenv/shims:/opt/boxen/nodenv/shims:"
                  "/usr/bin:/bin:/usr/sbin:/sbin:"
                  "/usr/local/bin:/usr/local/share/npm/bin"))
    (defun jedcn-sync-env-path-and-exec-path (desired-path)
      "Sets exec-path and env 'PATH' based on DESIRED-PATH"
      (setenv "PATH" desired-path)
      (setq exec-path (split-string desired-path ":")))
    (jedcn-sync-env-path-and-exec-path jedcn-explicit-env-path)
  #+END_SRC

* Packages and Modes

** Cask

   Packages to be installed are called out in the =Cask= file.

   To call out a new package, add a line like =(depends-on "xyz")=,
   and then re-run =cask install= from =~/.emacs.d=. Restart emacs.

   #+BEGIN_SRC emacs-lisp
     (require 'cask "~/.cask/cask.el")
     (cask-initialize)
   #+END_SRC

** magit

   Basic setup:

   #+BEGIN_SRC emacs-lisp
     (setq magit-last-seen-setup-instructions "1.4.0")
     (require 'magit)
   #+END_SRC

   Start magit with C-x m. Magit will be full screen. Press "q" when
   you are done, and magit will be dismissed and what you were
   previously looking at will be restored.

   #+BEGIN_SRC emacs-lisp
     (defun magit-status-fullscreen (prefix)
       (interactive "P")
       (magit-status)
       (unless prefix
         (delete-other-windows)))

     (global-set-key (kbd "C-x m") 'magit-status-fullscreen)
     (autoload 'magit-status-fullscreen "magit")
   #+END_SRC

   We can do the same idea with =vc-annotate=. I never remember the
   name of this-- so I provide an alias.

   #+BEGIN_SRC emacs-lisp
     (defun vc-annotate-quit ()
       "Restores the previous window configuration and kills the vc-annotate buffer"
       (interactive)
       (kill-buffer)
       (jump-to-register :vc-annotate-fullscreen))

     (eval-after-load "vc-annotate"
       '(progn
          (defadvice vc-annotate (around fullscreen activate)
            (window-configuration-to-register :vc-annotate-fullscreen)
            ad-do-it
            (delete-other-windows))
          (define-key vc-annotate-mode-map (kbd "q") 'vc-annotate-quit)))

     (defalias 'jedcn-git-blame 'vc-annotate)
   #+END_SRC

   Highlight fine differences within changed lines:

   #+BEGIN_SRC emacs-lisp
     (setq magit-diff-refine-hunk 'all)
   #+END_SRC

** org

   * Start by showing everything in a file.
   * Only show "the last" star.
   * Syntax highlight the content in a BEGIN_SRC/END_SRC blocks.

   #+BEGIN_SRC emacs-lisp
     (setq org-startup-folded 'showeverything)
     (setq org-hide-leading-stars 'hidestars)
     (setq org-src-fontify-natively t)
   #+END_SRC

   If you add emphasis by surrounding with /s or you make something
   look like code by surrounding with =s, hide the / or the =.

   #+BEGIN_SRC emacs-lisp
     (setq org-hide-emphasis-markers t)
   #+END_SRC

** Bullets

   When it comes to headings and lists, we'll make them look a bit
   nicer than default.

   For headings, we'll use org-bullets:

   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
   #+END_SRC

   For lists, we'll do some font-locking:

   List items made with an =*= will look like a dot. We'll leave =-= and =+=
   alone in case we want some variety:

   #+BEGIN_SRC emacs-lisp
     (font-lock-add-keywords 'org-mode
                             '(("^ +\\([*]\\) "
                                (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â€¢"))))))
   #+END_SRC

** coffee

   Each level should be indented 2 spaces:

   #+BEGIN_SRC emacs-lisp
     (setq coffee-tab-width 2)
   #+END_SRC

** js

   Each level should be indented 2 spaces:

   #+BEGIN_SRC emacs-lisp
     (setq js-indent-level 2)
   #+END_SRC

** web-mode

   Each level should be indented 2 spaces:

   #+BEGIN_SRC emacs-lisp
     (defun my-web-mode-hook ()
       "Hooks for web-mode."
       (setq web-mode-markup-indent-offset 2)
       (setq web-mode-css-indent-offset 2)
       (setq web-mode-code-indent-offset 2))
     (add-hook 'web-mode-hook  'my-web-mode-hook)
   #+END_SRC

   Turn on web-mode for .js files and presume all .js files may have
   JSX:

   #+BEGIN_SRC emacs-lisp
     (add-to-list 'auto-mode-alist '("\\.js\\'" . web-mode))

     (setq web-mode-content-types-alist
           '(("jsx" . "\\.js[x]?\\'")))
   #+END_SRC
** flycheck

   #+BEGIN_SRC emacs-lisp
     (add-hook 'after-init-hook #'global-flycheck-mode)
   #+END_SRC

** company

   Autocomplete with company. Start completing with M-/. Select
   between choices using: C-n or C-p.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'after-init-hook 'global-company-mode)
     (global-set-key (kbd "M-/") 'company-complete)
     (eval-after-load 'company
       '(progn
          (define-key company-active-map (kbd "M-n") nil)
          (define-key company-active-map (kbd "M-p") nil)
          (define-key company-active-map (kbd "C-n") #'company-select-next)
          (define-key company-active-map (kbd "C-p") #'company-select-previous)))
   #+END_SRC

** helm

   Use helm for:

   |-------------------------------+---------|
   | Selecting Commands to Run     | M-x     |
   | Selecting Between Buffers     | C-x b   |
   | Finding Files                 | C-x C-f |
   | Looking through the Kill Ring | M-y     |
   |-------------------------------+---------|

   #+BEGIN_SRC emacs-lisp
     (require 'helm)
     (require 'helm-config)
     (global-set-key (kbd "M-x") 'helm-M-x)
     (global-set-key (kbd "C-x b") 'helm-mini)
     (global-set-key (kbd "C-x C-f") 'helm-find-files)
     (global-set-key (kbd "M-y") 'helm-show-kill-ring)
   #+END_SRC

   If you are using helm, and you press <tab>, it will select what
   you've got under point:

   #+BEGIN_SRC emacs-lisp
     (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
   #+END_SRC

** projectile

   Projectile + Helm.

   |----------------------------------+---------|
   | Pick a project, then pick a file | C-c p p |
   | Once in a project, pick a file   | C-c p f |
   |----------------------------------+---------|
   | Sublime Text Pick a File         | M-t     |
   |----------------------------------+---------|

   #+BEGIN_SRC emacs-lisp
     (projectile-global-mode)
     (setq projectile-completion-system 'helm)
     (helm-projectile-on)
     (setq projectile-switch-project-action 'helm-projectile)
     (global-set-key (kbd "M-t") 'projectile-find-file)
   #+END_SRC

** diminish

   Do not show information about the following minor modes:

   #+BEGIN_SRC emacs-lisp
     (diminish 'projectile-mode)
     (eval-after-load "company" '(diminish 'company-mode))
     (eval-after-load "flycheck" '(diminish 'flycheck-mode))
     (eval-after-load "yasnippet" '(diminish 'yas-minor-mode))
   #+END_SRC

** yasnippet

   #+BEGIN_SRC emacs-lisp
     (require 'yasnippet)
     (setq yas-snippet-dirs
           (concat user-emacs-directory "snippets"))
     (yas-global-mode 1)
   #+END_SRC

** sh-mode

   #+BEGIN_SRC emacs-lisp
     (defun my-sh-mode-hook ()
       "Hook for sh-mode."
       (setq sh-basic-offset 2
             sh-indentation 2))
     (add-hook 'sh-mode-hook  'my-sh-mode-hook)
   #+END_SRC

* Basics

  Pressing "command" on a MacOS keyboard performs the M in M-x. You can
  still the default ("option") if you'd like:

  #+BEGIN_SRC emacs-lisp
    (setq mac-command-modifier 'meta)
  #+END_SRC

  CTRL-+ should increase font size, and CTRL-- should decrease it:

  #+BEGIN_SRC emacs-lisp
    (define-key global-map (kbd "C-+") 'text-scale-increase)
    (define-key global-map (kbd "C--") 'text-scale-decrease)
  #+END_SRC

  Ask for only "y" or "n":

  #+BEGIN_SRC emacs-lisp
    (defalias 'yes-or-no-p 'y-or-n-p)
  #+END_SRC

** Visual Changes

*** Theme

    #+BEGIN_SRC emacs-lisp
      (load-theme 'sanityinc-tomorrow-night t)
    #+END_SRC

*** Font

    #+BEGIN_SRC emacs-lisp
      (if window-system
          (set-face-attribute 'default nil :font "Menlo-18"))
    #+END_SRC

*** Line and column number.

    Make them visible at the bottom of the screen:

    #+BEGIN_SRC emacs-lisp
      (setq line-number-mode t)
      (setq column-number-mode t)
    #+END_SRC

*** Highlight current line.

    #+BEGIN_SRC emacs-lisp
      (defun highlight-current-line ()
        (hl-line-mode t))
      (add-hook 'prog-mode-hook 'highlight-current-line)
      (add-hook 'text-mode-hook 'highlight-current-line)
    #+END_SRC

*** Turn off the toolbar.

    #+BEGIN_SRC emacs-lisp
      (tool-bar-mode -1)
    #+END_SRC

*** Highlight matching paren.

    #+BEGIN_SRC emacs-lisp
      (show-paren-mode 1)
    #+END_SRC

** Behaviors

*** Removing trailing whitespace.

    Toggle by running:

    =jedcn-toggle-remove-trailing-whitespace-on-save=

    #+BEGIN_SRC emacs-lisp
      (setq jedcn-remove-trailing-whitespace-on-save t)

      (defun remove-trailing-whitespace ()
        "Perform a bunch of safe operations on the whitespace content of a buffer."
        (interactive)
        (if (equal jedcn-remove-trailing-whitespace-on-save t)
            (progn
              (untabify (point-min) (point-max))
              (delete-trailing-whitespace)
              (set-buffer-file-coding-system 'utf-8))))

      (add-hook 'before-save-hook 'remove-trailing-whitespace)

      (defun jedcn-toggle-remove-trailing-whitespace-on-save ()
        "Toggle whether or not whitespace will be removed on save"
        (interactive)
        (if jedcn-remove-trailing-whitespace-on-save
            (progn
              (message "The next save will *not* remove trailing whitespace.")
              (setq jedcn-remove-trailing-whitespace-on-save nil))
          (progn
            (message "The next save will remove trailing whitespace.")
            (setq jedcn-remove-trailing-whitespace-on-save t))))

    #+END_SRC

*** Don't beep, flash screen instead.

    #+BEGIN_SRC emacs-lisp
      (setq visible-bell t)
    #+END_SRC

*** Don't show startup screen.

    #+BEGIN_SRC emacs-lisp
      (setq inhibit-startup-message t)
    #+END_SRC

*** Add directory info to buffer names.

    This avoids the default when two buffers have the same name:
    =name= and =name<2>=.

    #+BEGIN_SRC emacs-lisp
      (require 'uniquify)
      (setq uniquify-buffer-name-style 'post-forward)
    #+END_SRC

*** Add a newline at the end of each file.

    #+BEGIN_SRC emacs-lisp
      (setq require-final-newline t)
    #+END_SRC

*** Save clipboard strings into kill ring before replacing them.

    #+BEGIN_SRC emacs-lisp
      (setq save-interprogram-paste-before-kill t)
    #+END_SRC

*** It is not OK to use tabs when indenting.

    #+BEGIN_SRC emacs-lisp
      (setq indent-tabs-mode nil)
    #+END_SRC

*** Remember place the next time you visit a file.

    #+BEGIN_SRC emacs-lisp
      (require 'saveplace)
      (setq-default save-place t)
      (setq save-place-file (concat user-emacs-directory "places"))
    #+END_SRC

*** Search with regular expressions

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-s") 'isearch-forward-regexp)
      (global-set-key (kbd "C-r") 'isearch-backward-regexp)
    #+END_SRC

*** Do not make backup files

    #+BEGIN_SRC emacs-lisp
      (setq make-backup-files nil)
    #+END_SRC

*** Other ways to execute commands

    Yegge Style and Sublime Style:

    #+BEGIN_SRC emacs-lisp
      (global-set-key "\C-x\C-m" 'execute-extended-command)
      (global-set-key "\M-P" 'execute-extended-command)
    #+END_SRC

*** Search, and then see all matches quickly

    #+BEGIN_SRC emacs-lisp
      (define-key isearch-mode-map (kbd "C-o")
        (lambda () (interactive)
          (let ((case-fold-search isearch-case-fold-search))
            (occur (if isearch-regexp isearch-string (regexp-quote isearch-string))))))
    #+END_SRC

*** Show line numbers when going to a line

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-x g") 'goto-line)
      (global-set-key [remap goto-line] 'goto-line-with-feedback)
      (defun goto-line-with-feedback ()
        "Show line numbers temporarily, while prompting for the line number input"
        (interactive)
        (unwind-protect
            (progn
              (linum-mode 1)
              (goto-line (read-number "Goto line: ")))
          (linum-mode -1)))

      (setq linum-format " %4d ")
    #+END_SRC

*** Semantic Expansion + Contraction

    This keybinding represents the combination of two ideas:

    1. The keys + or - makes things grow and shrink. For example,
       font-size grows with COMMAND-+ in Chrome on MacOs.
    2. There's an emacs convention that associates =C-M= with
       sexp/list/semantic movement. For example C-M-n, C-M-p, C-M-u,
       C-M-d, C-M-a, C-M-e, C-M-k

    Putting these together, the following works with the
    =expand-region= package to grow and shrink a region semantically.

    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-M-+") 'er/expand-region)
      (global-set-key (kbd "C-M--") 'er/contract-region)
    #+END_SRC

*** Evaluating Buffers

    This comes from [[https://github.com/jimweirich/emacs-setup-esk/blob/master/eval-buffer.el][Jim Weirich]]. :(.

    #+BEGIN_SRC emacs-lisp
      (defconst jedcn-eval-buffer-commands
        '(("js" . "/opt/boxen/nodenv/shims/node")
          ("rb" . "/opt/boxen/rbenv/shims/ruby")
          ("py" . "/opt/boxen/pyenv/shims/python")
          ("php" . "/usr/bin/php")))

      (defconst jedcn-eval-buffer-name "*EVALBUFFER*")

      (defun jedcn-eval-buffer ()
        "Evaluate the current buffer and display the result in a buffer."
        (interactive)
        (save-buffer)
        (let* ((file-name (buffer-file-name (current-buffer)))
               (file-extension (file-name-extension file-name))
               (buffer-eval-command-pair (assoc file-extension jedcn-eval-buffer-commands)))
          (if buffer-eval-command-pair
              (let ((command (concat (cdr buffer-eval-command-pair) " " file-name)))
                (shell-command-on-region (point-min) (point-max) command jedcn-eval-buffer-name nil)
                (pop-to-buffer jedcn-eval-buffer-name)
                (other-window 1)
                (jedcn-eval-buffer-pretty-up-errors jedcn-eval-buffer-name)
                (message ".."))
            (message "Unknown buffer type"))))

      (defun jedcn-eval-buffer-pretty-up-errors (buffer)
        "Fix up the buffer to highlight the error message (if it contains one)."
        (save-excursion
          (set-buffer buffer)
          (goto-char (point-min))
          (let ((pos (search-forward-regexp "\\.rb:[0-9]+:\\(in.+:\\)? +" (point-max) t)))
            (if pos (progn
                      (goto-char pos)
                      (insert-string "\n\n")
                      (end-of-line)
                      (insert-string "\n"))))))

      (defun jedcn-clear-eval-buffer ()
        (interactive)
        (save-excursion
          (set-buffer jedcn-eval-buffer-name)
          (kill-region (point-min) (point-max))))

      (defun jedcn-eval-or-clear-buffer (n)
        (interactive "P")
        (cond ((null n) (jedcn-eval-buffer))
              (t (jedcn-clear-eval-buffer))))
    #+END_SRC
** Server

   Setup an emacs server on start.

   Use emacsclient to "edit" with a shared emacs. Press =C-x #= when
   done.

   #+BEGIN_SRC emacs-lisp
     (server-start)
   #+END_SRC
